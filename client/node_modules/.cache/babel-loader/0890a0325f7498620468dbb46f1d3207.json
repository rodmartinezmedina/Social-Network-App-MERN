{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR } from \"./types\"; //Load User\n\nexport const loadUser = () => async dispatch => {}; //Register user action\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/users\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      //the data we get back in this case is the token\n      payload: res.data\n    });\n  } catch (err) {\n    //getting array of errors from the backend\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL //we dont need payload as register_fail in auth reducer does not give back anything\n\n    });\n  }\n}; //Every time the main App component is loaded we should:\n// take the token we have stored\n// send it to backend for validation. Hitting GET api/auth\n// then load the user\n// (remember json web tokens are stateless)","map":{"version":3,"sources":["/home/rodrigo/WEB-DEVELOPMENT/REACT-PROJECTS/MERN-social-network/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","loadUser","dispatch","register","name","email","password","config","headers","body","JSON","stringify","res","post","type","payload","data","err","errors","response","forEach","error","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,UAJF,QAKO,SALP,C,CAOA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB,CAAE,CAA7C,C,CAEP;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+B,MAAOJ,QAAP,IAAoB;AACzE,QAAMK,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;;AACA,MAAI;AACF,UAAMM,GAAG,GAAG,MAAMjB,KAAK,CAACkB,IAAN,CAAW,YAAX,EAAyBJ,IAAzB,EAA+BF,MAA/B,CAAlB;AACAL,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEjB,gBADC;AAEP;AACAkB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAHN,KAAD,CAAR;AAKD,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZ;AACA,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBE,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAWnB,QAAQ,CAACN,QAAQ,CAACyB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAlC;AACD;;AACDpB,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEhB,aADC,CAEP;;AAFO,KAAD,CAAR;AAID;AACF,CAzBM,C,CA2BP;AACA;AACA;AACA;AACA","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n} from \"./types\";\n\n//Load User\nexport const loadUser = () => async (dispatch) => {};\n\n//Register user action\nexport const register = ({ name, email, password }) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const body = JSON.stringify({ name, email, password });\n  try {\n    const res = await axios.post(\"/api/users\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      //the data we get back in this case is the token\n      payload: res.data,\n    });\n  } catch (err) {\n    //getting array of errors from the backend\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: REGISTER_FAIL,\n      //we dont need payload as register_fail in auth reducer does not give back anything\n    });\n  }\n};\n\n//Every time the main App component is loaded we should:\n// take the token we have stored\n// send it to backend for validation. Hitting GET api/auth\n// then load the user\n// (remember json web tokens are stateless)\n"]},"metadata":{},"sourceType":"module"}